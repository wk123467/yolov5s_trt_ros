// Generated by gencpp from file yolo_detect/target.msg
// DO NOT EDIT!


#ifndef YOLO_DETECT_MESSAGE_TARGET_H
#define YOLO_DETECT_MESSAGE_TARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yolo_detect
{
template <class ContainerAllocator>
struct target_
{
  typedef target_<ContainerAllocator> Type;

  target_()
    : ClassName()
    , conf(0.0)
    , tl_x(0)
    , tl_y(0)
    , br_x(0)
    , br_y(0)  {
    }
  target_(const ContainerAllocator& _alloc)
    : ClassName(_alloc)
    , conf(0.0)
    , tl_x(0)
    , tl_y(0)
    , br_x(0)
    , br_y(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ClassName_type;
  _ClassName_type ClassName;

   typedef float _conf_type;
  _conf_type conf;

   typedef int32_t _tl_x_type;
  _tl_x_type tl_x;

   typedef int32_t _tl_y_type;
  _tl_y_type tl_y;

   typedef int32_t _br_x_type;
  _br_x_type br_x;

   typedef int32_t _br_y_type;
  _br_y_type br_y;





  typedef boost::shared_ptr< ::yolo_detect::target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolo_detect::target_<ContainerAllocator> const> ConstPtr;

}; // struct target_

typedef ::yolo_detect::target_<std::allocator<void> > target;

typedef boost::shared_ptr< ::yolo_detect::target > targetPtr;
typedef boost::shared_ptr< ::yolo_detect::target const> targetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolo_detect::target_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolo_detect::target_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yolo_detect::target_<ContainerAllocator1> & lhs, const ::yolo_detect::target_<ContainerAllocator2> & rhs)
{
  return lhs.ClassName == rhs.ClassName &&
    lhs.conf == rhs.conf &&
    lhs.tl_x == rhs.tl_x &&
    lhs.tl_y == rhs.tl_y &&
    lhs.br_x == rhs.br_x &&
    lhs.br_y == rhs.br_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yolo_detect::target_<ContainerAllocator1> & lhs, const ::yolo_detect::target_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yolo_detect

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::yolo_detect::target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolo_detect::target_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolo_detect::target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolo_detect::target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolo_detect::target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolo_detect::target_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolo_detect::target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "975a9db10eefa3284189115d7225099b";
  }

  static const char* value(const ::yolo_detect::target_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x975a9db10eefa328ULL;
  static const uint64_t static_value2 = 0x4189115d7225099bULL;
};

template<class ContainerAllocator>
struct DataType< ::yolo_detect::target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolo_detect/target";
  }

  static const char* value(const ::yolo_detect::target_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolo_detect::target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string ClassName\n"
"float32 conf\n"
"int32 tl_x\n"
"int32 tl_y\n"
"int32 br_x\n"
"int32 br_y\n"
;
  }

  static const char* value(const ::yolo_detect::target_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolo_detect::target_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ClassName);
      stream.next(m.conf);
      stream.next(m.tl_x);
      stream.next(m.tl_y);
      stream.next(m.br_x);
      stream.next(m.br_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct target_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolo_detect::target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolo_detect::target_<ContainerAllocator>& v)
  {
    s << indent << "ClassName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ClassName);
    s << indent << "conf: ";
    Printer<float>::stream(s, indent + "  ", v.conf);
    s << indent << "tl_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tl_x);
    s << indent << "tl_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.tl_y);
    s << indent << "br_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.br_x);
    s << indent << "br_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.br_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLO_DETECT_MESSAGE_TARGET_H
